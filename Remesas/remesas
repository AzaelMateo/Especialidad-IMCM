
#/************************************************************************************************************************************************
# Filename: AM202405_Remesas
# Author: Azael Mateo
# Date: 06/May 2024
#
# Purpose: This file generates the script to build a vis of ...
#
# Created files: -
#/************************************************************************************************************************************************/

rm(list = ls())
wd <- "D:/Users/MAMA95C3/Desktop/Especialidad/Remesas/"
setwd(wd)
options(scipen=999)

library(tidyverse)
library(seasonal)
library(inegiR)
library(siebanxicor)
library(ggtext)
library(janitor)
library(glue)
library(ggthemes)

# Descarga y limpieza de datos -------------------------------------------------------------------------------------------------------------------

# Descargamos las series de interés usando la API de Inegi
token_inegi <- "fc69a858-83ff-46cf-16e1-592f67f0f400"
url_inegi <- paste("https://www.inegi.org.mx/app/api/indicadores/desarrolladores/jsonxml/CL_INDICATOR/628194/es/BIE/2.0/",
                   token_inegi,
                   "?type=xml",
                   sep = "")


download.file(url_inegi, "metadata.xml", method = "auto")

vars <- list(
  inpc = "628194" #inpc
)

# Definir función para procesar cada serie
procesar_serie <- function(serie_id, token_inegi) {
  serie <- inegi_series(serie_id, token_inegi)
  serie <- as_tibble(serie) %>%
    select(-date_shortcut, -notes) %>%
    arrange(date)
  
  return(serie)
}

# Procesar cada serie
for (nombre_serie in names(vars)) {
  assign(nombre_serie, procesar_serie(vars[[nombre_serie]], token_inegi))
}

# Limpiamos serie del inpc
inpc <- filter(inpc, date >= as.Date("1995-01-01") & date <= as.Date("2024-03-01")) %>% 
  rename(Fecha = date, inpc = values)

# Descargamos las series de interés usando la API de Banxico
setToken("1af6c7a83023f55e305ff39f285c00d998c6c05e0c77ff08bd9f019e619453ff")

idSeries <- c("SE27803", #remesas totales corrientes
              "SF17908") #tipo de cambio promedio mensual

series_banxico <- getSeriesData(idSeries, '1995-01-01','2024-03-31')

# Limpiamos serie de remesas
remesas <- as_tibble(series_banxico[[2]]) %>% 
  rename(Fecha = date, remesas_dlls = value)

# Limpiamos serie de tipo de cambio
tdc <- as_tibble(series_banxico[[1]]) %>% 
  rename(Fecha = date, tdc = value)

# Construimos base que integra todas las series
series_originales <- cbind(inpc, remesas[,-1], tdc[,-1]) %>% 
  mutate(remesas_mxn = remesas_dlls * tdc, 
         remesas_mxn_real = remesas_mxn / inpc * 100)


# Exploración de Series de Tiempo ----------------------------------------------------------------------------------------------------------------

# Construimos las series de tiempo que nos interesan
ts_remesas_dlls <- ts(series_originales[,3], start = c(1995, 1), frequency = 12)
ts_remesas_mxn_real <- ts(series_originales[,6], start = c(1995, 1), frequency = 12)

plot(decompose(ts_remesas_dlls)) #descomposición
plot(decompose(ts_remesas_mxn_real)) #descomposición

Model_dlls <- seas(ts_remesas_dlls, x11 = "") #modelo de ajuste estacional
summary(Model_dlls)
Model_mxn_real <- seas(ts_remesas_mxn_real, x11 = "") #modelo de ajuste estacional
summary(Model_mxn_real)

plot(Model_dlls) #gráficos del ajuste estacional
plot(Model_mxn_real) #gráficos del ajuste estacional

dlls_ajustada <- final(Model_dlls) # Obtener la serie ajustada del modelo
mxn_real_ajustada <- final(Model_mxn_real) # Obtener la serie ajustada del modelo
dlls_tendencia <- trend(Model_dlls) # Obtener la serie tendencia-ciclo del modelo
mxn_real_tendencia <- trend(Model_mxn_real) # Obtener la serie tendencia-ciclo del modelo

# Exportamos a Excel ------------------------------------------------------------------------------------------------------------------------------

# Integramos series ajustadas a nuestra base
series_ajustadas <- series_originales %>% 
  cbind(dlls_ajustada, mxn_real_ajustada) %>% 
  mutate(dlls_ajustada = as.numeric(dlls_ajustada), mxn_real_ajustada = as.numeric(mxn_real_ajustada),
         dlls_tendencia = as.numeric(dlls_tendencia), mxn_real_tendencia = as.numeric(mxn_real_tendencia))

# write.csv(series_ajustadas, "series_ajustadas.csv", row.names = FALSE)

# Configurar el primer eje vertical y trazar la primera serie
plot(dlls_ajustada, type = "l", col = "red", ylim = c(0000, 6000), xlab = "", ylab = "", xaxt = "n", yaxt = "n")
axis(side = 1, at = seq_along(series_originales$Fecha), labels = series_originales$Fecha, las = 2)
axis(side = 2, at = pretty(range(dlls_ajustada)), col = "red", col.axis = "red", las = 2)

# Configurar el segundo eje vertical y trazar la segunda serie
par(new = TRUE)
plot(mxn_real_ajustada, type = "l", col = "blue", ylim = range(mxn_real_ajustada), xlab = "", ylab = "", xaxt = "n", yaxt = "n")
axis(side = 4, at = pretty(range(mxn_real_ajustada)), col = "blue", col.axis = "blue", las = 2)

# Etiquetas
title(main = "Recepción de Remesas (millones)")
legend("topleft", legend = c("Dólares", "Pesos Constantes"), col = c("red", "blue"), lty = 1)

boxplot(ts_remesas_dlls~cycle(ts_remesas_dlls), xlab = "Month", ylab = "Dólares",
        main = "Recepción de Remesas", names = month.abb, col = "red")

boxplot(ts_remesas_mxn_real~cycle(ts_remesas_mxn_real), xlab = "Month", ylab = "Pesos Constantes",
        main = "Recepción de Remesas", names = month.abb, col = "blue")

